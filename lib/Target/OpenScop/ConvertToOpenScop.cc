//===- EmitOpenScop.cc ------------------------------------------*- C++ -*-===//
//
// This file implements the interfaces for emitting OpenScop representation from
// MLIR modules.
//
//===----------------------------------------------------------------------===//

#include "polymer/Support/OslScop.h"
#include "polymer/Support/OslScopStmtOpSet.h"
#include "polymer/Support/OslSymbolTable.h"
#include "polymer/Target/OpenScop.h"

#include "mlir/Analysis/AffineAnalysis.h"
#include "mlir/Analysis/AffineStructures.h"
#include "mlir/Analysis/LoopAnalysis.h"
#include "mlir/Analysis/Utils.h"
#include "mlir/Dialect/Affine/IR/AffineOps.h"
#include "mlir/Dialect/Affine/IR/AffineValueMap.h"
#include "mlir/Dialect/Affine/Passes.h"
#include "mlir/Dialect/StandardOps/IR/Ops.h"
#include "mlir/IR/BlockAndValueMapping.h"
#include "mlir/IR/Builders.h"
#include "mlir/IR/Function.h"
#include "mlir/IR/Module.h"
#include "mlir/IR/StandardTypes.h"
#include "mlir/Interfaces/SideEffectInterfaces.h"
#include "mlir/Transforms/LoopUtils.h"
#include "mlir/Transforms/Utils.h"
#include "mlir/Translation.h"

#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/SetVector.h"
#include "llvm/ADT/StringSet.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/Format.h"
#include "llvm/Support/FormatVariadic.h"
#include "llvm/Support/raw_ostream.h"

#include "osl/osl.h"

#include <memory>

using namespace mlir;
using namespace llvm;
using namespace polymer;

#define DEBUG_TYPE "emit-openscop"

typedef llvm::DenseMap<mlir::Value, unsigned> MemRefToId;

/// Map between a loop IV (mlir::Value) and its iterator name in Scop.
typedef llvm::DenseMap<mlir::Value, std::string> LoopIVToName;

std::string getMemrefName(unsigned id) {
  std::string name = formatv("A{0}", id);
  return name;
}

namespace {
/// Extracted data from the domain constraints, will be used as the value of
/// paramMap when generating scop. lb and ub will be used to get the context
/// relation.
struct DomainParameter {
  unsigned pos; // Parameter column position in the constraints.
  llvm::Optional<int64_t> lb, ub; // Lower and upper bounds.

  DomainParameter() : pos(0), lb(llvm::None), ub(llvm::None) {}
  DomainParameter(unsigned pos, llvm::Optional<int64_t> lb,
                  llvm::Optional<int64_t> ub)
      : pos(pos), lb(lb), ub(ub) {}
};
} // namespace

/// Add parameters to the maintained parameter-ID map.
static void
addParamsToMap(FlatAffineConstraints &domain,
               llvm::DenseMap<mlir::Value, DomainParameter> &paramMap) {
  // Get symbol values from the domain constraint.
  SmallVector<mlir::Value, 8> values;
  unsigned offset = domain.getNumDimIds();
  domain.getIdValues(offset, domain.getNumDimAndSymbolIds(), &values);

  // Insert the value into the map if there isn't one.
  for (int i = 0, e = values.size(); i < e; i++) {
    mlir::Value value = values[i];
    auto lb = domain.getConstantLowerBound(i + offset);
    auto ub = domain.getConstantUpperBound(i + offset);
    LLVM_DEBUG(llvm::dbgs() << "Bound for parameter i=" << i << " : [" << lb
                            << ", " << ub << ")\n");

    paramMap.try_emplace(value, DomainParameter(paramMap.size(), lb, ub));
  }
}

/// Build the mapping from position to parameters.
static void
buildPosToParamMap(const llvm::DenseMap<mlir::Value, DomainParameter> &paramMap,
                   SmallVectorImpl<mlir::Value> &posToParam) {
  unsigned numParam = paramMap.size();
  posToParam.resize(numParam);

#ifdef NDEBUG
  for (auto const &it : paramMap)
    assert(it.second.pos < numParam &&
           "The position of a parameter should be smaller than the total "
           "number of parameters.");
#endif

  // paramMap has mappings from mlir::Values to their corresponding
  // DomainParameter. Here we need to create a reversed mapping from the
  // position of each domain parameter to its corresponding mlir::Value. Since
  // we already resized posToParam, we can just place the mlir::Value of each
  // parameter at its corresponding position in posToParam.
  for (auto const &it : paramMap)
    posToParam[it.second.pos] = it.first;
}

/// Create a context relation from parameters and add it to the scop.
static void
addContextToScop(llvm::DenseMap<mlir::Value, DomainParameter> &paramMap,
                 OslScop *scop) {
  unsigned numParams = paramMap.size();
  unsigned numCols = 2 + numParams;

  std::vector<int64_t> ctxEqs, ctxInEqs;

  // We assume the context relation is built on inequalities generated by the
  // lower and upper bound of each parameter.
  ctxInEqs.reserve(numParams * 2 * (numCols - 1));

  unsigned i = 0; // The parameter ID.
  std::vector<int64_t> inEq(numCols - 1, 0);
  for (auto const &it : paramMap) {
    DomainParameter param = it.second;
    assert((param.lb != llvm::None || param.ub != llvm::None) &&
           "At least one of lb and ub should not be None.");

    // Set the lower bound
    if (param.lb != llvm::None) {
      std::fill(inEq.begin(), inEq.end(), 0);
      inEq[i] = 1;                              // The pos of the parameter.
      inEq[numCols - 2] = -param.lb.getValue(); // The constant.
      ctxInEqs.insert(ctxInEqs.end(), inEq.begin(), inEq.end());
    }
    // Set the upper bound
    if (param.ub != llvm::None) {
      std::fill(inEq.begin(), inEq.end(), 0);
      inEq[i] = -1;                            // The pos of the parameter.
      inEq[numCols - 2] = param.ub.getValue(); // The constant.
      ctxInEqs.insert(ctxInEqs.end(), inEq.begin(), inEq.end());
    }

    i++;
  }

  // Assuming no equality.
  unsigned numRows = ctxInEqs.size() / (numCols - 1);
  scop->addRelation(0, OSL_TYPE_CONTEXT, numRows, numCols, 0, 0, 0, numParams,
                    ctxEqs, ctxInEqs);
}

/// Update the parameter (symbol) section of the domain constraints. We need to
/// make sure that all domains share the same set of parameters and they are
/// located at the same positions.
static void
updateDomainParams(FlatAffineConstraints &domain,
                   SmallVectorImpl<mlir::Value> &posToParam,
                   llvm::DenseMap<mlir::Value, DomainParameter> &paramMap) {
  unsigned offset = domain.getNumDimIds();
  unsigned numParams = paramMap.size();

  for (unsigned pos = 0; pos < numParams; pos++) {
    mlir::Value param = posToParam[pos];

    unsigned posInDomain;
    if (domain.findId(param, &posInDomain)) {
      // If there is such param in the domain, we should check whether its
      // position is right.
      if (posInDomain != offset + pos) {
        // posInDomain should be larger than pos. It is because all parameters
        // located before pos should already be placed correctly.
        assert(posInDomain > pos &&
               "posInDomain should be larger than pos if not equal.");
        domain.swapId(offset + pos, posInDomain);
      }
    } else {
      domain.addSymbolId(pos, /*id=*/param);
    }
  }
}

/// Get a clone of the elements in the equalities or inequalities of
/// FlatAffineConstraints.
static void getEqualities(FlatAffineConstraints &cst, std::vector<int64_t> &eqs,
                          bool isEq = true) {
  unsigned numEqualities =
      isEq ? cst.getNumEqualities() : cst.getNumInequalities();
  unsigned numDimIds = cst.getNumDimIds();
  unsigned numLocalIds = cst.getNumLocalIds();
  unsigned numSymbolIds = cst.getNumSymbolIds();

  for (unsigned i = 0; i < numEqualities; i++) {
    auto eq = isEq ? cst.getEquality(i) : cst.getInequality(i);
    unsigned numCols = eq.size();
    if (i == 0)
      eqs.resize(numEqualities * numCols);

    // Dims stay at the same positions.
    for (unsigned j = 0; j < numDimIds; j++)
      eqs[i * numCols + j] = eq[j];
    // Output local ids before symbols.
    for (unsigned j = 0; j < numLocalIds; j++)
      eqs[i * numCols + j + numDimIds] = eq[j + numDimIds + numSymbolIds];
    // Output symbols in the end.
    for (unsigned j = 0; j < numSymbolIds; j++)
      eqs[i * numCols + j + numDimIds + numLocalIds] = eq[j + numDimIds];
    eqs[i * numCols + numCols - 1] = eq[numCols - 1];
  }
}

/// Gather information from the domain FlatAffineConstraints and put them into
/// the scop as a DOMAIN relation. index gives the statement id.
static void addDomainToScop(unsigned index, FlatAffineConstraints &domain,
                            OslScop *scop) {
  // First we clone the equalities and inequalities from the domain constraints.
  std::vector<int64_t> eqs, inEqs;
  getEqualities(domain, eqs);
  getEqualities(domain, inEqs, /*isEq=*/false);

  // Then put them into the scop as a DOMAIN relation.
  scop->addRelation(index + 1, OSL_TYPE_DOMAIN, domain.getNumConstraints(),
                    domain.getNumCols() + 1, domain.getNumDimIds(), 0,
                    domain.getNumLocalIds(), domain.getNumSymbolIds(), eqs,
                    inEqs);
}

namespace {
/// Tree that holds scattering information. This node can represent an induction
/// variable or a statement. A statement is constructed as a leaf node.
class ScatTreeNode {
public:
  ScatTreeNode() {}
  ScatTreeNode(mlir::Value iv) : iv(iv) {}

  /// Children of the current node.
  std::vector<std::unique_ptr<ScatTreeNode>> children;

  /// Mapping from IV to child ID.
  llvm::DenseMap<mlir::Value, unsigned> valueIdMap;

  /// Induction variable.
  mlir::Value iv;
};
} // namespace

// Get the depth of the tree starting from the given root node.
static unsigned getDepth(ScatTreeNode *root) {
  assert(root && "The root node should not be NULL.");

  llvm::SmallVector<std::pair<ScatTreeNode *, unsigned>, 8> nodes;
  nodes.push_back(std::make_pair(root, 1));
  unsigned maxDepth = 1;

  while (!nodes.empty()) {
    auto curr = nodes.back();
    nodes.pop_back();
    maxDepth = std::max(maxDepth, curr.second);

    for (auto &child : curr.first->children)
      nodes.push_back(std::make_pair(child.get(), curr.second + 1));
  }

  return maxDepth;
}

/// Insert a statement characterized by its enclosing operations into a
/// "scattering tree". This is done by iterating through every enclosing for-op
/// from the outermost to the innermost, and we try to traverse the tree by the
/// IVs of these ops. If an IV does not exist, we will insert it into the tree.
/// After that, we insert the current load/store statement into the tree as a
/// leaf. In this progress, we keep track of all the IDs of each child we meet
/// and the final leaf node, which will be used as the scattering.
static void insertStatement(ScatTreeNode *root,
                            ArrayRef<Operation *> enclosingOps,
                            SmallVectorImpl<unsigned> &scattering) {
  ScatTreeNode *curr = root;

  for (unsigned i = 0, e = enclosingOps.size(); i < e; i++) {
    Operation *op = enclosingOps[i];
    // We only handle for op here.
    // TODO: is it necessary to deal with if?
    if (auto forOp = dyn_cast<AffineForOp>(op)) {
      SmallVector<mlir::Value, 4> indices;
      extractForInductionVars(forOp, &indices);

      for (auto iv : indices) {
        auto it = curr->valueIdMap.find(iv);
        if (it != curr->valueIdMap.end()) {
          // Add a new element to the scattering.
          scattering.push_back(it->second);
          // move to the next IV along the tree.
          curr = curr->children[it->second].get();
        } else {
          // No existing node for such IV is found, create a new one.
          auto node = std::make_unique<ScatTreeNode>(iv);

          // Then insert the newly created node into the children set, update
          // the value to child ID map, and move the cursor to this new node.
          curr->children.push_back(std::move(node));
          unsigned valueId = curr->children.size() - 1;
          curr->valueIdMap[iv] = valueId;
          scattering.push_back(valueId);
          curr = curr->children.back().get();
        }
      }
    }
  }

  // Append the leaf node for statement
  auto leaf = std::make_unique<ScatTreeNode>();
  curr->children.push_back(std::move(leaf));
  scattering.push_back(curr->children.size() - 1);
}

static void addScatteringToScop(unsigned index, ArrayRef<unsigned> scattering,
                                FlatAffineConstraints &domain, OslScop *scop) {
  // Elements (N of them) in `scattering` are constants, and there are IVs
  // interleaved them. Therefore, we have 2N - 1 number of scattering
  // equalities.
  unsigned numScatteringEqualities = scattering.size() * 2 - 1;
  // Columns include new scattering dimensions and those from the domain.
  unsigned numScatteringCols =
      numScatteringEqualities + domain.getNumCols() + 1;

  // Create equalities and inequalities.
  std::vector<int64_t> eqs, inEqs;

  // Initialize contents for equalities.
  eqs.resize(numScatteringEqualities * (numScatteringCols - 1));
  for (unsigned j = 0; j < numScatteringEqualities; j++) {

    // Initializing scattering dimensions by setting the diagonal to -1.
    for (unsigned k = 0; k < numScatteringEqualities; k++)
      eqs[j * (numScatteringCols - 1) + k] = -static_cast<int64_t>(k == j);

    // Relating the loop IVs to the scattering dimensions. If it's the odd
    // equality, set its scattering dimension to the loop IV; otherwise, it's
    // scattering dimension will be set in the following constant section.
    for (unsigned k = 0; k < domain.getNumDimIds(); k++)
      eqs[j * (numScatteringCols - 1) + k + numScatteringEqualities] =
          (j % 2) ? (k == (j / 2)) : 0;

    // TODO: consider the parameters that may appear in the scattering
    // dimension.
    for (unsigned k = 0; k < domain.getNumLocalIds() + domain.getNumSymbolIds();
         k++)
      eqs[j * (numScatteringCols - 1) + k + numScatteringEqualities +
          domain.getNumDimIds()] = 0;

    // Relating the constants (the last column) to the scattering dimensions.
    eqs[j * (numScatteringCols - 1) + numScatteringCols - 2] =
        (j % 2) ? 0 : scattering[j / 2];
  }

  // Then put them into the scop as a SCATTERING relation.
  scop->addRelation(index + 1, OSL_TYPE_SCATTERING, numScatteringEqualities,
                    numScatteringCols, numScatteringEqualities,
                    domain.getNumDimIds(), domain.getNumLocalIds(),
                    domain.getNumSymbolIds(), eqs, inEqs);
}

/// Generate the access relation and add it to the scop.
static void addAccessToScop(unsigned index, unsigned memrefId, bool isRead,
                            ArrayRef<SmallVector<int64_t, 8>> flatExprs,
                            ArrayRef<mlir::Value> indices,
                            ArrayRef<mlir::Value> symbols,
                            FlatAffineConstraints &domain, OslScop *scop) {
  // Number of equalities equals to the number of indices that this access
  // relation uses, plus 1 that corresponds to the array itself.
  unsigned numAccessIndices = flatExprs.size();
  unsigned numAccessEqs = numAccessIndices + 1;
  unsigned numAccessRawCols = domain.getNumCols() + numAccessEqs;
  unsigned numAccessCols = numAccessRawCols + 1;
  unsigned numDimIds = domain.getNumDimIds();
  unsigned numSymbolIds = domain.getNumSymbolIds();
  unsigned numLocalIds = domain.getNumLocalIds();

  // Create equalities and inequalities.
  std::vector<int64_t> eqs, inEqs;
  eqs.resize(numAccessEqs * numAccessRawCols);

  for (unsigned i = 0; i < numAccessEqs; i++) {
    unsigned startIdx = i * numAccessRawCols;

    // The first section of a diagonal square matrix that points which axis the
    // current access relation is working on.
    for (unsigned j = 0; j < numAccessIndices + 1; j++)
      eqs[startIdx + j] = -static_cast<int64_t>(i == j);
    startIdx += numAccessIndices + 1;

    // Set up the relation betwene the memref access position and the loop IVs.
    if (i == 0) {
      // The first row sets the array ID to the memref ID.
      for (unsigned j = 0; j < domain.getNumCols() - 1; j++)
        eqs[startIdx + j] = 0;
      eqs[startIdx + domain.getNumCols() - 1] = memrefId;
    } else {
      // Put the coefficients in the flat exprs into the access relation.
      unsigned numFlatExprCols = flatExprs[i - 1].size();
      unsigned numFlatExprDimIds = indices.size();
      unsigned numFlatExprSymbolIds = symbols.size();
      unsigned numFlatExprLocalIds =
          numFlatExprCols - numFlatExprDimIds - numFlatExprSymbolIds - 1;

      // Note that numFlatExprCols may be smaller than the number of columns in
      // the domain constraints, mainly because the flatExprs are not aligned
      // with the position in domain constraints. Therefore, for those cases
      // that numFlatExprCols equals to the number of columns in the domain
      // constraint, we take a special approach to handle the mis-placed local
      // IDs; otherwise, we just place what in the flatExpr into the access
      // equalities.
      // TODO: properly handle local vars in the access equalities.

      // Input dims.
      for (unsigned j = 0; j < numDimIds; j++)
        eqs[startIdx + j] = 0; // initialize
      // Set corresponding dim to 1.
      for (unsigned j = 0; j < numFlatExprDimIds; j++) {
        if (auto val = flatExprs[i - 1][j]) {
          unsigned pos;
          assert(domain.findId(indices[j], &pos) &&
                 "Access index value not found in the domain constraints.");
          eqs[startIdx + pos] = val;
        }
      }
      startIdx += numDimIds;

      // Local dims.
      for (unsigned j = 0; j < numLocalIds; j++)
        eqs[startIdx + j] =
            flatExprs[i - 1][j + numFlatExprDimIds + numFlatExprSymbolIds];
      startIdx += numLocalIds;

      // Parameters.
      for (unsigned j = 0; j < numSymbolIds; j++)
        eqs[startIdx + j] = 0; // initialize
      for (unsigned j = 0; j < numFlatExprSymbolIds; j++) {
        if (auto val = flatExprs[i - 1][j + numFlatExprDimIds]) {
          unsigned pos;
          assert(domain.findId(symbols[j], &pos) &&
                 "Symbol value not found in the domain constraints.");
          eqs[startIdx + pos - numDimIds] = val;
        }
      }
      startIdx += numSymbolIds;

      // Constant.
      eqs[startIdx] = flatExprs[i - 1][numFlatExprCols - 1];
    }
  }

  // Then put them into the scop as a ACCESS relation.
  scop->addRelation(index + 1, isRead ? OSL_TYPE_READ : OSL_TYPE_WRITE,
                    numAccessEqs, numAccessCols, numAccessEqs,
                    domain.getNumDimIds(), domain.getNumLocalIds(),
                    domain.getNumSymbolIds(), eqs, inEqs);
}

static void addParameterNamesToScop(unsigned numParams, OslScop *scop) {
  if (numParams == 0)
    return;

  std::string body;
  llvm::raw_string_ostream ss(body);

  for (unsigned i = 0; i < numParams; i++)
    ss << formatv("P{0}", i) << " ";

  scop->addGeneric(-1, "strings", body);
}

/// Add the body extension to each statement. `stmtId` corresponds to the index
/// of the statement in the scop (starting from 1), and `op` is the memory
/// access operation. In the content of the body we need to decide the number of
/// the original iterators and what they are. This can be retrieved from the
/// access indices of the given op.
static void addBodyExtToScop(int stmtId, OslScopStmtOpSet *opSet,
                             LoopIVToName &ivNameMap, OslSymbolTable &symTable,
                             const MemRefToId &memrefIdMap, OslScop *scop) {
  // The string content of the body extension.
  std::string body;
  llvm::raw_string_ostream ss(body);

  llvm::SmallVector<MemRefAccess, 8> accesses;
  llvm::SmallVector<std::string, 8> args;

  // The first set of arguments are memref names. There is no specific ordering
  // of the names.
  for (auto op : *opSet) {
    if (isa<mlir::AffineLoadOp, mlir::AffineStoreOp>(op)) {
      MemRefAccess access(op);
      auto memRefType = access.memref.getType().cast<MemRefType>();

      std::string memName = getMemrefName(memrefIdMap.lookup(access.memref));
      // Each memref is followed by its number of dimensions.
      args.push_back(memName);
      args.push_back(std::to_string(memRefType.getShape().size()));

      accesses.push_back(access);
    }
  }

  // Get loop IVs.
  SetVector<mlir::Value> ivArgs;
  for (auto access : accesses) {
    for (auto iv : access.indices) {
      // If `iv` doesn't exist in the ivNameMap, we insert a new one using
      // format "i[number]". Sometimes parameters can exist in access.indices,
      // we should distinguish them with IV by checking the type. If the type of
      // the iv is BlockArgument, then it is an actual IV; otherwise it is a
      // constant parameter.
      if (iv.dyn_cast<BlockArgument>()) {
        ivNameMap.try_emplace(iv, formatv("i{0}", ivNameMap.size()));
        ivArgs.insert(iv);
      }
    }
  }

  // Number of iterators.
  ss << ivArgs.size() << " ";
  // Add iterator names.
  for (auto ivArg : ivArgs) {
    args.push_back(ivNameMap[ivArg]);
    ss << ivNameMap[ivArg] << " ";
  }

  // Get statement ID following the pattern "S<ID>", e.g., S0, S1, etc. We
  // assume the given op has not been added to stmtToOp before as a value.
  unsigned numStmtOpSets = symTable.getNumOpSets(OslSymbolTable::StmtOpSet);
  std::string stmtName = formatv("S{0}", numStmtOpSets);
  symTable.setOpSet(stmtName, *opSet, OslSymbolTable::StmtOpSet);

  // Should start a new line before inserting the statement body.
  ss << "\n" << stmtName << "(";
  interleaveComma(args, ss);
  ss << ")";

  // TODO: specify the statement body.
  scop->addGeneric(stmtId + 1, "body", body);
}

/// Add a <scatnames> extension for the whole scop. Given the total number of
/// scattering IDs, we generate a list of names following the pattern: "c<id>",
/// e.g., c0, c1, etc., for all odd number IDs, and "i<id/2>" for all even
/// number IDs. This is to keep aligh with the iterator names generated by
/// `addBodyExtToScop`.
static void addScatnamesExtToScop(unsigned numScatNames, OslScop *scop) {
  std::string body;
  llvm::raw_string_ostream ss(body);

  // The original # scatnames should be 1 (root) + n (IVs) + 1 (leaf), what we
  // want here is 2 n (IVs) + 1 (leaf). We should perform the following update.
  if (numScatNames < 2)
    return;
  numScatNames = (numScatNames - 2) * 2 + 1;

  for (unsigned i = 0; i < numScatNames; i++) {
    if (i % 2)
      ss << formatv("i{0}", i / 2) << " ";
    else
      ss << formatv("c{0}", i) << " ";
  }

  scop->addGeneric(0, "scatnames", body);
}

/// Add the arrays extension to the whole Scop.
static void addArraysExtToScop(const MemRefToId &memrefIdMap, OslScop *scop) {
  std::string body;
  llvm::raw_string_ostream ss(body);

  ss << memrefIdMap.size() << " ";
  for (auto const &it : memrefIdMap)
    ss << it.second << " " << formatv("A{0}", it.second) << " ";

  scop->addGeneric(0, "arrays", body);
}

namespace {

/// This class maintains the state of a working emitter.
class OpenScopEmitterState {
public:
  explicit OpenScopEmitterState(raw_ostream &os) : os(os) {}

  /// The stream to emit to.
  raw_ostream &os;

  bool encounteredError = false;
  unsigned currentIdent = 0; // TODO: may not need this.

private:
  OpenScopEmitterState(const OpenScopEmitterState &) = delete;
  void operator=(const OpenScopEmitterState &) = delete;
};

/// Base class for various OpenScop emitters.
class OpenScopEmitterBase {
public:
  explicit OpenScopEmitterBase(OpenScopEmitterState &state)
      : state(state), os(state.os) {}

  InFlightDiagnostic emitError(Operation *op, const Twine &message) {
    state.encounteredError = true;
    return op->emitError(message);
  }

  InFlightDiagnostic emitOpError(Operation *op, const Twine &message) {
    state.encounteredError = true;
    return op->emitOpError(message);
  }

  /// All of the mutable state we are maintaining.
  OpenScopEmitterState &state;

  /// The stream to emit to.
  raw_ostream &os;

private:
  OpenScopEmitterBase(const OpenScopEmitterBase &) = delete;
  void operator=(const OpenScopEmitterBase &) = delete;
};

/// Emit OpenScop representation from an MLIR module.
class ModuleEmitter : public OpenScopEmitterBase {
public:
  explicit ModuleEmitter(OpenScopEmitterState &state)
      : OpenScopEmitterBase(state) {}

  /// Emit OpenScop definitions for all functions in the given module.
  void emitMLIRModule(ModuleOp module,
                      llvm::SmallVectorImpl<std::unique_ptr<OslScop>> &scops);

private:
  /// Emit a OpenScop definition for a single function.
  LogicalResult
  emitFuncOp(FuncOp func,
             llvm::SmallVectorImpl<std::unique_ptr<OslScop>> &scops);
};

LogicalResult ModuleEmitter::emitFuncOp(
    mlir::FuncOp func, llvm::SmallVectorImpl<std::unique_ptr<OslScop>> &scops) {
  OslSymbolTable symTable;
  auto scop = createOpenScopFromFuncOp(func, symTable);
  if (!scop)
    return failure();

  scops.push_back(std::move(scop));
  return success();
}

/// The entry function to the current OpenScop emitter.
void ModuleEmitter::emitMLIRModule(
    ModuleOp module, llvm::SmallVectorImpl<std::unique_ptr<OslScop>> &scops) {
  // Emit a single OpenScop definition for each function.
  for (auto &op : *module.getBody()) {
    if (auto func = dyn_cast<mlir::FuncOp>(op)) {
      if (failed(emitFuncOp(func, scops))) {
        state.encounteredError = true;
        return;
      }
    }
  }
}
} // namespace

static LogicalResult getDefOps(Operation *op, OslScopStmtOpSet &defOps) {
  if (!op)
    return success();

  // Alloc will be omitted.
  // TODO: extend this to a full list of omitted operation type.
  if (isa<AllocOp>(op))
    return success();

  // Only operations with the NoSideEffect traits are allowed.
  if (!isa<mlir::AffineLoadOp, mlir::AffineStoreOp>(op) &&
      op->hasTrait<mlir::OpTrait::HasRecursiveSideEffects>()) {
    op->emitError("A def-op that is not load/store should not have side "
                  "effect.");
    return failure();
  }

  // Keep the op in the given set.
  defOps.insert(op);
  // If the op visited is an affine.load or a constant op, this process will
  // terminate.
  if (isa<mlir::AffineLoadOp, mlir::ConstantOp>(op))
    return success();
  // Recursively visit other defining ops that are not in defOps.
  for (auto operand : op->getOperands()) {
    auto defOp = operand.getDefiningOp();
    if (defOps.count(defOp) == 0 && failed(getDefOps(defOp, defOps)))
      return failure();
  }

  return success();
}

std::unique_ptr<OslScop>
polymer::createOpenScopFromFuncOp(mlir::FuncOp funcOp,
                                  OslSymbolTable &symTable) {
  // Initialize a new Scop per FuncOp.
  auto scop = std::make_unique<OslScop>();

  // We iterate through every operation in the function and extract store
  // operations out into storeOps. Each store op will be converted to an
  // OpenScop statement.
  SmallVector<Operation *, 8> storeOps;
  funcOp.getOperation()->walk([&](Operation *op) {
    if (isa<mlir::AffineWriteOpInterface>(op))
      storeOps.push_back(op);
  });

  LLVM_DEBUG(llvm::dbgs() << "Found " << storeOps.size()
                          << " number of load/store operations.\n");

  // Total number of statements.
  unsigned numStatements = storeOps.size();

  // Cache all the enclosing operations for all statements.
  std::vector<SmallVector<Operation *, 4>> enclosingOpsList(numStatements);
  // Store the domain constraints for all statements. We need to pre-calculate
  // them, such that we can derive the full set of parameters.
  std::vector<FlatAffineConstraints> domains(numStatements);

  // Create the root tree node.
  ScatTreeNode root;
  // Maintain the identifiers of memref objects
  MemRefToId memrefIdMap;
  // Maintain the mapping from the parameter Value and its numbering.
  llvm::DenseMap<mlir::Value, DomainParameter> paramMap;
  // Mapping the position of parameter to the parameter itself.
  SmallVector<mlir::Value, 8> posToParam;
  // Mapping between loop IVs and their name in Scop.
  LoopIVToName ivNameMap;

  SmallVector<OslScopStmtOpSet, 8> stmtOpSets;

  // TODO: refactorize later
  for (unsigned i = 0; i < numStatements; i++) {
    Operation *op = storeOps[i];
    OslScopStmtOpSet stmtOpSet;

    // The set of statement operations are determined by the use-def chain ended
    // at the corresponding affine.store op.
    if (failed(getDefOps(op, stmtOpSet)))
      return nullptr;

    // Get the domain and enclosing ops.
    if (failed(stmtOpSet.getEnclosingOps(enclosingOpsList[i])) ||
        failed(stmtOpSet.getDomain(domains[i], enclosingOpsList[i])))
      return nullptr;

    // Update the paramMap.
    addParamsToMap(domains[i], paramMap);

    stmtOpSets.push_back(stmtOpSet);
  }

  // Build the mapping from position to a specific parameter.
  buildPosToParamMap(paramMap, posToParam);

  // Iterate through every statement.
  for (unsigned i = 0; i < numStatements; i++) {
    FlatAffineConstraints domain = domains[i];
    auto ops = enclosingOpsList[i];

    // Update the parameters mapping for domain.
    updateDomainParams(domain, posToParam, paramMap);

    // Initialize a new statement in the scop. Maybe it is better to initialize
    // all statements at once?
    scop->createStatement();

    // Add the domain relation to the scop object.
    addDomainToScop(i, domain, scop.get());

    // Get the scattering. By using insertStatement, we create new nodes in the
    // scattering tree representation rooted at `root`, and get the result
    // scattering relation in the `scattering` vector.
    // TODO: consider strided loop indices.
    SmallVector<unsigned, 8> scattering;
    insertStatement(&root, ops, scattering);

    // Add the scattering relation to the scop object.
    addScatteringToScop(i, scattering, domain, scop.get());

    // TODO: can we wrap these calculation into a bigger data structure like
    // FlatAffineConstraints?
    // Elements (N of them) in `scattering` are constants, and there are IVs
    // interleaved them. Therefore, we have 2N - 1 number of scattering
    // equalities.
    unsigned numScatteringEqualities = scattering.size() * 2 - 1;
    // Columns include new scattering dimensions and those from the domain.
    unsigned numScatteringCols =
        numScatteringEqualities + domain.getNumCols() + 1;

    // Get the access
    Operation *storeOp = nullptr;
    OslScopStmtOpSet opSet = stmtOpSets[i];
    for (auto op : opSet) {
      if (isa<mlir::AffineStoreOp, mlir::AffineLoadOp>(op)) {
        MemRefAccess access(op);
        auto it = memrefIdMap.find(access.memref);
        if (it == memrefIdMap.end())
          memrefIdMap[access.memref] = memrefIdMap.size() + 1;
        auto memrefId = memrefIdMap[access.memref];

        AffineValueMap accessMap;
        access.getAccessMap(&accessMap);

        std::vector<SmallVector<int64_t, 8>> flatExprs;
        FlatAffineConstraints localVarCst;

        unsigned numAccessDims = accessMap.getNumDims();

        // Setup symbols
        mlir::SmallVector<mlir::Value, 8> symbols;
        for (unsigned i = 0; i < accessMap.getNumSymbols(); i++)
          symbols.push_back(accessMap.getOperand(i + numAccessDims));

        // Setup indices
        mlir::SmallVector<mlir::Value, 8> indices;
        for (auto iv : access.indices)
          if (iv.isa<BlockArgument>())
            indices.push_back(iv);

        if (failed(getFlattenedAffineExprs(accessMap.getAffineMap(), &flatExprs,
                                           &localVarCst)))
          return nullptr;

        assert(flatExprs.size() > 0 &&
               "Number of flat expressions should be larger than 0.");

        LLVM_DEBUG(llvm::dbgs()
                   << "Number of flat exprs: " << flatExprs.size() << "\n");
        LLVM_DEBUG(llvm::dbgs()
                   << "Flat expr size: " << flatExprs[0].size() << "\n");

        // Insert the access relation into the scop.
        addAccessToScop(i, memrefId, !access.isStore(), flatExprs, indices,
                        symbols, domain, scop.get());
      }

      if (isa<mlir::AffineStoreOp>(op))
        storeOp = op;
    }

    // Insert the body extension.
    addBodyExtToScop(i, &stmtOpSets[i], ivNameMap, symTable, memrefIdMap,
                     scop.get());
  }

  // Setup the context after iterated all statemenets.
  addContextToScop(paramMap, scop.get());
  // Add arrays extension content.
  addArraysExtToScop(memrefIdMap, scop.get());
  // Add scatnames extension content.
  addScatnamesExtToScop(getDepth(&root), scop.get());
  // Add parameter names
  addParameterNamesToScop(paramMap.size(), scop.get());

  // scop->print();
  // assert(scop->validate() && "Scop created cannot be validated.");

  // Update the mapping from name to loop IV and memref.
  for (auto it : ivNameMap)
    symTable.setValue(it.second, it.first, OslSymbolTable::LoopIV);
  for (auto it : memrefIdMap)
    symTable.setValue(getMemrefName(it.second), it.first,
                      OslSymbolTable::Memref);

  return scop;
}

/// TODO: should decouple emitter and openscop builder.
mlir::LogicalResult polymer::translateModuleToOpenScop(
    mlir::ModuleOp module,
    llvm::SmallVectorImpl<std::unique_ptr<OslScop>> &scops,
    llvm::raw_ostream &os) {
  OpenScopEmitterState state(os);
  ModuleEmitter(state).emitMLIRModule(module, scops);

  return success();
}

static LogicalResult emitOpenScop(ModuleOp module, llvm::raw_ostream &os) {
  llvm::SmallVector<std::unique_ptr<OslScop>, 8> scops;

  if (failed(translateModuleToOpenScop(module, scops, os)))
    return failure();

  for (auto &scop : scops)
    scop->print();

  return success();
}

void polymer::registerToOpenScopTranslation() {
  static TranslateFromMLIRRegistration toOpenScop("export-scop", emitOpenScop);
}
