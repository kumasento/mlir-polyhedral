# This is a basic workflow to help you get started with Actions

name: Build and Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and Test
    
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    steps:
    - name: Add dependences
      run: |
        sudo apt-get update -y
        sudo apt-get install -y clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang
        sudo apt-get install -y ninja-build cmake
        sudo apt-get install -y libgmp-dev

    - name: Get repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Get LLVM Hash
      id: get-llvm-hash
      run: echo "::set-output name=hash::$(git submodule status | awk '{print $1}')"
      shell: bash

    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v1
      with:
        path: lib/llvm-project
        key: ${{ runner.os }}-llvm-install-${{ steps.get-llvm-hash.outputs.hash }}

    - name: Install LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        mkdir llvm/build
        cd llvm/build
        cmake ../llvm -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_TARGETS_TO_BUILD="host" -DCMAKE_INSTALL_PREFIX=../install -DLLVM_ENABLE_PROJECTS='mlir' -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS=ON -G Ninja
        ninja -j$(nproc)

    - name: Build and Test
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS=ON -DMLIR_DIR=../llvm/build/lib/cmake/mlir/ -DLLVM_DIR=../llvm/build/lib/cmake/llvm/ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_EXTERNAL_LIT=${pwd}/../llvm/build/bin/llvm-lit -G Ninja
        ninja check-polymer
