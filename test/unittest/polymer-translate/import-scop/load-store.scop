// RUN: polymer-translate %s -import-scop | FileCheck %s

# [File generated by the OpenScop Library 0.9.2]

<OpenScop>

# =============================================== Global
# Language
C

# Context
CONTEXT
0 2 0 0 0 0

# Parameters are not provided
0


# Number of statements
1

# =============================================== Statement 1
# Number of relations describing the statement:
4

# ----------------------------------------------  1.1 Domain
DOMAIN
2 3 1 0 0 0
# e/i| i0 |  1  
   1    1    0    ## i0 >= 0
   1   -1   31    ## -i0+31 >= 0

# ----------------------------------------------  1.2 Scattering
SCATTERING
3 6 3 1 0 0
# e/i| c1   c2   c3 | i0 |  1  
   0   -1    0    0    0    0    ## c1 == 0
   0    0   -1    0    1    0    ## c2 == i0
   0    0    0   -1    0    0    ## c3 == 0

# ----------------------------------------------  1.3 Access
WRITE
2 5 2 1 0 0
# e/i| Arr  [1]| i0 |  1  
   0   -1    0    0    1    ## Arr == A1
   0    0   -1    1    0    ## [1] == i0

READ
2 5 2 1 0 0
# e/i| Arr  [1]| i0 |  1  
   0   -1    0    0    1    ## Arr == A1
   0    0   -1    1    0    ## [1] == i0

# ----------------------------------------------  1.4 Statement Extensions
# Number of Statement Extensions
1
<body>
# Number of original iterators
1
# List of original iterators
i0
# Statement body expression
S0(A1, 1, A1, 1, i0)
</body>

# =============================================== Extensions
<arrays>
# Number of arrays
1
# Mapping array-identifiers/array-names
1 A1
</arrays>

<scatnames>
c0 i0 c2
</scatnames>

</OpenScop>

// CHECK: #map0 = affine_map<() -> (0)>
// CHECK: #map1 = affine_map<() -> (31)>
//
//
// CHECK: module {
// CHECK:   func @main(%arg0: memref<?xf32>) {
// CHECK:     affine.for %arg1 = 0 to 31 {
// CHECK:       call @S0(%arg0, %arg0, %arg1) : (memref<?xf32>, memref<?xf32>, index) -> ()
// CHECK:     }
// CHECK:     return
// CHECK:   }
// CHECK:   func @S0(memref<?xf32>, memref<?xf32>, index)
// CHECK: }
