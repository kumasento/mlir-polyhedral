// RUN: polymer-translate %s -import-openscop | FileCheck %s

<OpenScop>

# =============================================== Global
# Language
C

# Context
CONTEXT
0 2 0 0 0 0

# Parameters are not provided
0


# Number of statements
1

# =============================================== Statement 1
# Number of relations describing the statement:
4

# ----------------------------------------------  1.1 Domain
DOMAIN
7 4 2 0 0 0
# e/i| i0   i1 |  1  
   1    1    0    0    ## i0 >= 0
   1   -1    0   31    ## -i0+31 >= 0
   1    0    1    0    ## i1 >= 0
   1    0   -1   31    ## -i1+31 >= 0
   1    1    0  -16    ## i0-16 >= 0
   1    0    1  -16    ## i1-16 >= 0
   1   -1    1    0    ## -i0+i1 >= 0

# ----------------------------------------------  1.2 Scattering
SCATTERING
5 9 5 2 0 0
# e/i| c1   c2   c3   c4   c5 | i0   i1 |  1  
   0   -1    0    0    0    0    0    0    0    ## c1 == 0
   0    0   -1    0    0    0    1    0    0    ## c2 == i0
   0    0    0   -1    0    0    0    0    0    ## c3 == 0
   0    0    0    0   -1    0    0    1    0    ## c4 == i1
   0    0    0    0    0   -1    0    0    0    ## c5 == 0

# ----------------------------------------------  1.3 Access
WRITE
3 7 3 2 0 0
# e/i| Arr  [1]  [2]| i0   i1 |  1  
   0   -1    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    ## [2] == i1

READ
3 7 3 2 0 0
# e/i| Arr  [1]  [2]| i0   i1 |  1  
   0   -1    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    ## [2] == i1

# ----------------------------------------------  1.4 Statement Extensions
# Number of Statement Extensions
1
<body>
# Number of original iterators
2
# List of original iterators
i0 i1
# Statement body expression
S0(A1, 2, A1, 2, i0, i1)
</body>

# =============================================== Extensions
<arrays>
# Number of arrays
1
# Mapping array-identifiers/array-names
1 A1
</arrays>

<scatnames>
c0 i0 c2 i1 c4
</scatnames>

</OpenScop>

// CHECK: #map0 = affine_map<(d0) -> (d0)>
// CHECK: #map1 = affine_map<() -> (31)>
// CHECK: #map2 = affine_map<() -> (16)>
//
//
// CHECK: module {
// CHECK:   func @main(%arg0: memref<?x?xf32>) {
// CHECK:     affine.for %arg1 = 16 to 31 {
// CHECK:       affine.for %arg2 = #map0(%arg1) to 31 {
// CHECK:         call @S0(%arg0, %arg0, %arg1, %arg2) : (memref<?x?xf32>, memref<?x?xf32>, index, index) -> ()
// CHECK:       }
// CHECK:     }
// CHECK:     return
// CHECK:   }
// CHECK:   func @S0(memref<?x?xf32>, memref<?x?xf32>, index, index)
// CHECK: }
